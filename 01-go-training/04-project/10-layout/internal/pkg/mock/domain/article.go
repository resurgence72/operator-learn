// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./domain/article.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mohuishou/new-project/internal/domain"
	reflect "reflect"
)

// MockIArticleUsecase is a mock of IArticleUsecase interface
type MockIArticleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleUsecaseMockRecorder
}

// MockIArticleUsecaseMockRecorder is the mock recorder for MockIArticleUsecase
type MockIArticleUsecaseMockRecorder struct {
	mock *MockIArticleUsecase
}

// NewMockIArticleUsecase creates a new mock instance
func NewMockIArticleUsecase(ctrl *gomock.Controller) *MockIArticleUsecase {
	mock := &MockIArticleUsecase{ctrl: ctrl}
	mock.recorder = &MockIArticleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIArticleUsecase) EXPECT() *MockIArticleUsecaseMockRecorder {
	return m.recorder
}

// GetArticle mocks base method
func (m *MockIArticleUsecase) GetArticle(ctx context.Context, id int) (*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, id)
	ret0, _ := ret[0].(*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle
func (mr *MockIArticleUsecaseMockRecorder) GetArticle(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockIArticleUsecase)(nil).GetArticle), ctx, id)
}

// CreateArticle mocks base method
func (m *MockIArticleUsecase) CreateArticle(ctx context.Context, article *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle
func (mr *MockIArticleUsecaseMockRecorder) CreateArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockIArticleUsecase)(nil).CreateArticle), ctx, article)
}

// MockIArticleRepo is a mock of IArticleRepo interface
type MockIArticleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleRepoMockRecorder
}

// MockIArticleRepoMockRecorder is the mock recorder for MockIArticleRepo
type MockIArticleRepoMockRecorder struct {
	mock *MockIArticleRepo
}

// NewMockIArticleRepo creates a new mock instance
func NewMockIArticleRepo(ctrl *gomock.Controller) *MockIArticleRepo {
	mock := &MockIArticleRepo{ctrl: ctrl}
	mock.recorder = &MockIArticleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIArticleRepo) EXPECT() *MockIArticleRepoMockRecorder {
	return m.recorder
}

// GetArticle mocks base method
func (m *MockIArticleRepo) GetArticle(ctx context.Context, id int) (*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, id)
	ret0, _ := ret[0].(*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle
func (mr *MockIArticleRepoMockRecorder) GetArticle(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockIArticleRepo)(nil).GetArticle), ctx, id)
}

// CreateArticle mocks base method
func (m *MockIArticleRepo) CreateArticle(ctx context.Context, article *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle
func (mr *MockIArticleRepoMockRecorder) CreateArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockIArticleRepo)(nil).CreateArticle), ctx, article)
}
